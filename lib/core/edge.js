// Generated by CoffeeScript 1.10.0
(function() {
  var Edge, Node, json, p, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('lightsaber/lib/log'), json = ref.json, p = ref.p;

  Node = require('./node');

  Edge = (function(superClass) {
    extend(Edge, superClass);

    function Edge(arg) {
      var data, ref1, ref2;
      this.start = arg.start, this.end = arg.end, data = arg.data;
      if (!(this.start instanceof Node)) {
        throw new Error("start must be of type Node, got " + (json(this.start)));
      }
      if (!(this.end instanceof Node)) {
        throw new Error("end must be of type Node, got " + (json(this.end)));
      }
      if (!((this.start != null) && (this.end != null))) {
        throw new Error("Missing start [ID: " + ((ref1 = this.start) != null ? ref1.id() : void 0) + "] and/or end [ID: " + ((ref2 = this.end) != null ? ref2.id() : void 0) + "] in 'args' ");
      }
      this._data = data;
    }

    Edge.prototype.id = function() {
      return (this.start.id()) + " -> " + (this.end.id());
    };

    Edge.prototype.data = function() {
      var map;
      map = {
        start: this.start.data(),
        end: this.end.data()
      };
      if (this._data) {
        map.data = this._data;
      }
      return map;
    };

    return Edge;

  })(Node);

  module.exports = Edge;

}).call(this);
