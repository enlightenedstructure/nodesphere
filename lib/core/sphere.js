// Generated by CoffeeScript 1.10.0
(function() {
  var Edge, Identified, Node, Sphere, d, omit, pjson, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('lightsaber/lib/log'), pjson = ref.pjson, d = ref.d;

  omit = require('lodash').omit;

  Node = require('./node');

  Edge = require('./edge');

  Identified = require('./identified');

  Sphere = (function(superClass) {
    extend(Sphere, superClass);

    Sphere.prototype.DEFAULT_KEY_LENGTH = 44;

    function Sphere(args) {
      this.setKey(args);
      this.nodes = {};
      this.edges = {};
    }

    Sphere.prototype.id = function() {
      return this._id;
    };

    Sphere.prototype.attr = function(predicate, object) {
      return this.triple(this.id(), predicate, object);
    };

    Sphere.prototype.triple = function(subject, predicate, object) {
      return this.addEdge({
        start: this.addNode({
          name: subject
        }),
        end: this.addNode({
          name: object
        }),
        data: {
          name: predicate
        }
      });
    };

    Sphere.prototype.addRootNode = function(attrs) {
      this.rootNode = this.addNode(attrs);
      return this.rootNode;
    };

    Sphere.prototype.addNode = function(attrs) {
      var node;
      node = new Node(attrs, {
        keyLength: this.keyLength
      });
      this.nodes[node.id()] = node;
      return node;
    };

    Sphere.prototype.addEdge = function(attrs) {
      var edge;
      edge = new Edge(attrs);
      this.edges[edge.id()] = edge;
      return edge;
    };

    Sphere.prototype.getNode = function(id) {
      return this.nodes[id];
    };

    Sphere.prototype.load = function() {
      return Promise.resolve(this);
    };

    Sphere.prototype.toJson = function(args) {
      var replacer, space;
      if (args == null) {
        args = {};
      }
      replacer = args.replacer, space = args.space;
      return JSON.stringify(this.data(), replacer, space);
    };

    Sphere.prototype.data = function() {
      return {
        id: this.id(),
        nodes: this.nodesData(),
        edges: this.edgesData()
      };
    };

    Sphere.prototype.nodesData = function() {
      var key, node, nodesData, ref1;
      nodesData = {};
      ref1 = this.nodes;
      for (key in ref1) {
        node = ref1[key];
        nodesData[key] = omit(node.data(), 'id');
      }
      return nodesData;
    };

    Sphere.prototype.edgesData = function() {
      var edge, edgesData, key, ref1;
      edgesData = {};
      ref1 = this.edges;
      for (key in ref1) {
        edge = ref1[key];
        edgesData[key] = edge.data();
      }
      return edgesData;
    };

    return Sphere;

  })(Identified);

  module.exports = Sphere;

}).call(this);
