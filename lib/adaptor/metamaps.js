// Generated by CoffeeScript 1.10.0
(function() {
  var MetamapsAdaptor, Promise, Sphere, axios, d, pjson, ref;

  ref = require('lightsaber/lib/log'), d = ref.d, pjson = ref.pjson;

  Promise = require('bluebird');

  axios = require('axios');

  Sphere = require('../core/sphere');

  MetamapsAdaptor = (function() {
    function MetamapsAdaptor() {}

    MetamapsAdaptor.create = function(args) {
      return Promise.resolve(new MetamapsAdaptor(args));
    };

    MetamapsAdaptor.prototype.fetch = function(arg) {
      var canonicalUrl, corsHackUrl, domain, mapId, protocol;
      protocol = arg.protocol, domain = arg.domain, mapId = arg.mapId;
      if (protocol == null) {
        protocol = 'https://';
      }
      canonicalUrl = "" + protocol + domain + "/api/v1/maps/" + mapId;
      corsHackUrl = protocol + "cors-anywhere.herokuapp.com/" + domain + "/api/v1/maps/" + mapId;
      return axios.get(corsHackUrl, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      }).then(function(response) {
        var i, j, len, len1, ref1, ref2, sphere, synapse, topic, topics;
        topics = {};
        sphere = new Sphere({
          id: canonicalUrl
        });
        ref1 = response.data.topics;
        for (i = 0, len = ref1.length; i < len; i++) {
          topic = ref1[i];
          sphere.addNode(topic);
        }
        ref2 = response.data.synapses;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          synapse = ref2[j];
          sphere.addEdge({
            start: sphere.nodes[synapse.topic1_id],
            end: sphere.nodes[synapse.topic2_id]
          });
        }
        return sphere;
      });
    };

    return MetamapsAdaptor;

  })();

  module.exports = MetamapsAdaptor;

}).call(this);
