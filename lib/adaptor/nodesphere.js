// Generated by CoffeeScript 1.10.0
(function() {
  var NodesphereAdaptor, Promise, Sphere, d, defaults, json, log, pjson, ref, ref1, request, values,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('lightsaber/lib/log'), json = ref.json, log = ref.log, d = ref.d, pjson = ref.pjson;

  ref1 = require('lodash'), defaults = ref1.defaults, values = ref1.values;

  Promise = require('bluebird');

  request = require('axios');

  Sphere = require('../core/sphere');

  NodesphereAdaptor = (function() {
    function NodesphereAdaptor() {
      this.process = bind(this.process, this);
    }

    NodesphereAdaptor.create = function(args) {
      return Promise.resolve(new NodesphereAdaptor(args));
    };

    NodesphereAdaptor.prototype.fetch = function(args) {
      var url;
      url = args.url;
      return request({
        url: url
      }).then(this.process)["catch"](function(error) {
        throw error;
      });
    };

    NodesphereAdaptor.prototype.process = function(arg) {
      var data, edge, edgeData, id, node, ref2, ref3, ref4, ref5, sphere;
      data = arg.data;
      sphere = new Sphere;
      ref2 = data.nodes;
      for (id in ref2) {
        node = ref2[id];
        defaults(node, {
          id: id
        });
        sphere.addNode(node);
      }
      ref3 = data.edges;
      for (id in ref3) {
        edge = ref3[id];
        edgeData = {
          start: (function() {
            if ((ref4 = sphere.nodes[edge.start.id]) != null) {
              return ref4;
            } else {
              throw new Error("Node with id " + edge.start.id + " not found in nodesphere");
            }
          })(),
          end: (function() {
            if ((ref5 = sphere.nodes[edge.end.id]) != null) {
              return ref5;
            } else {
              throw new Error("Node with id " + edge.end.id + " not found in nodesphere");
            }
          })()
        };
        if (edge.data) {
          edgeData.data = edge.data;
        }
        sphere.addEdge(edgeData);
      }
      return sphere;
    };

    return NodesphereAdaptor;

  })();

  module.exports = NodesphereAdaptor;

}).call(this);
