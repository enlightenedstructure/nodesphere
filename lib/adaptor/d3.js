// Generated by CoffeeScript 1.10.0
(function() {
  var D3Adaptor, Edge, Node, Promise, d, defaults, json, log, pjson, ref, ref1, request, values,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('lightsaber/lib/log'), json = ref.json, log = ref.log, d = ref.d, pjson = ref.pjson;

  ref1 = require('lodash'), defaults = ref1.defaults, values = ref1.values;

  Promise = require('bluebird');

  request = require('axios');

  Node = require('../core/node');

  Edge = require('../core/edge');

  D3Adaptor = (function() {
    function D3Adaptor() {
      this.process = bind(this.process, this);
    }

    D3Adaptor.create = function(args) {
      return Promise.resolve(new D3Adaptor(args));
    };

    D3Adaptor.prototype.fetch = function(args) {
      var url;
      url = args.url;
      return request({
        url: url
      }).then(this.process)["catch"](function(error) {
        throw error;
      });
    };

    D3Adaptor.prototype.process = function(arg) {
      var data, edges, edgesStartingWithNode, i, j, len, len1, maxNodePopularity, mostPopularNode, nodeMap, nodes, ref2, ref3, ref4, source, target, value;
      data = arg.data;
      nodeMap = {};
      edges = [];
      edgesStartingWithNode = {};
      maxNodePopularity = 0;
      ref2 = data.links;
      for (i = 0, len = ref2.length; i < len; i++) {
        source = ref2[i].source;
        if (edgesStartingWithNode[source] == null) {
          edgesStartingWithNode[source] = 0;
        }
        edgesStartingWithNode[source] += 1;
        if (edgesStartingWithNode[source] > maxNodePopularity) {
          mostPopularNode = source;
        }
      }
      ref3 = data.links;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        ref4 = ref3[j], source = ref4.source, target = ref4.target, value = ref4.value;
        if (source === mostPopularNode) {
          edges.push(new Edge({
            start: this.cache(nodeMap, defaults(data.nodes[source], {
              id: source
            })),
            end: this.cache(nodeMap, defaults(data.nodes[target], {
              id: target
            })),
            value: value
          }));
        }
      }
      nodes = values(nodeMap);
      return {
        nodes: nodes,
        edges: edges,
        suggestedRootNodeId: mostPopularNode
      };
    };

    D3Adaptor.prototype.cache = function(nodeMap, props) {
      var id, ref2;
      id = (function() {
        if ((ref2 = props.id) != null) {
          return ref2;
        } else {
          throw new Error;
        }
      })();
      if (nodeMap[id] == null) {
        nodeMap[id] = new Node(props);
      }
      return nodeMap[id];
    };

    return D3Adaptor;

  })();

  module.exports = D3Adaptor;

}).call(this);
