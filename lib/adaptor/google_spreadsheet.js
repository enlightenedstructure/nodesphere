// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var GoogleSpreadsheet;
    return GoogleSpreadsheet = (function() {
      function GoogleSpreadsheet() {}

      GoogleSpreadsheet.as_sphere = function(options, callback) {
        var json_url;
        json_url = (function() {
          if (options.id) {
            return "https://spreadsheets.google.com/feeds/cells/" + options['id'] + "/1/public/basic?alt=json";
          } else if (options.fixture) {
            return "/fixtures/" + options.fixture + ".json";
          } else {
            throw "to_sphere expected options.id or options.fixture, got neither";
          }
        })();
        return $.getJSON(json_url, function(json) {
          var sphere;
          sphere = GoogleSpreadsheet.sphere_from_json(json, options);
          return callback(sphere);
        });
      };

      GoogleSpreadsheet.sphere_from_json = function(spreadsheet, options) {
        var harmonics, primary_headers, secondary_headers, sphere;
        sphere = new NodeSphere();
        primary_headers = {};
        secondary_headers = {};
        this.each_cell(spreadsheet, options, (function(_this) {
          return function(text, primary_index, secondary_index) {
            if (secondary_index === 1) {
              primary_headers[primary_index] = text;
            }
            if (primary_index === 1) {
              return secondary_headers[secondary_index] = text;
            }
          };
        })(this));
        harmonics = {};
        this.each_cell(spreadsheet, options, (function(_this) {
          return function(text, primary_index, secondary_index) {
            var _ref;
            if (((_ref = secondary_headers[secondary_index]) != null ? _ref.toLowerCase() : void 0) === 'harmonic') {
              if (text.toLowerCase() !== 'harmonic') {
                return harmonics[primary_index] = text;
              }
            }
          };
        })(this));
        this.each_cell(spreadsheet, options, (function(_this) {
          return function(text, primary_index, secondary_index) {
            var primary_header, secondary_header;
            primary_header = primary_headers[primary_index];
            secondary_header = secondary_headers[secondary_index];
            sphere.add_meta_if(primary_header, text);
            sphere.insert_if(primary_header, secondary_header || '(blank)', text);
            sphere.insert_if(secondary_header, text, primary_header);
            if ((secondary_header != null ? secondary_header.toLowerCase() : void 0) === 'direct link') {
              return sphere.insert_if(primary_header, 'url', text);
            }
          };
        })(this));
        return sphere;
      };

      GoogleSpreadsheet.each_cell = function(spreadsheet, options, callback) {
        var cell, cells, col, id, match, row, text, _i, _len, _ref, _ref1, _results;
        cells = spreadsheet.feed.entry;
        _results = [];
        for (_i = 0, _len = cells.length; _i < _len; _i++) {
          cell = cells[_i];
          text = (_ref = cell.content.$t) != null ? _ref.trim() : void 0;
          id = cell.id.$t;
          _ref1 = /R(\d+)C(\d+)$/.exec(id), match = _ref1[0], row = _ref1[1], col = _ref1[2];
          if (options.gsheet_orientation === 'columns') {
            _results.push(callback(text, Number(col), Number(row)));
          } else if (options.gsheet_orientation === 'rows') {
            _results.push(callback(text, Number(row), Number(col)));
          } else {
            throw "Unexpected value for options.gsheet_orientation: '" + options.gsheet_orientation + "'";
          }
        }
        return _results;
      };

      return GoogleSpreadsheet;

    })();
  });

}).call(this);
