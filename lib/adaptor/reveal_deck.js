// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var NodeSphere, RevealDeck, RevealSlide, log, p, _ref;
    NodeSphere = require('core/node_sphere');
    log = require('light/log');
    _ref = require('light/log'), log = _ref.log, p = _ref.p;
    RevealDeck = (function() {
      function RevealDeck() {}

      RevealDeck.as_sphere = function(callback) {
        var slide, sphere, _i, _len, _ref1;
        this.load_slides();
        sphere = new NodeSphere();
        sphere.describe(this.meta);
        _ref1 = this.slides;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          slide = _ref1[_i];
          sphere.add(slide.name, slide.meta);
        }
        return callback(sphere);
      };

      RevealDeck.load_slides = function() {
        var sections, self;
        self = this;
        self.slides = [];
        sections = $('.reveal > .slides section:not(:has(section))');
        return sections.each(function(index) {
          var home_slide;
          if (index === 0) {
            home_slide = new RevealSlide(sections.first(), index);
            return self.meta = {
              name: home_slide.name,
              url: home_slide.meta.url
            };
          } else {
            return self.slides.push(new RevealSlide($(this), index));
          }
        });
      };

      return RevealDeck;

    })();
    RevealSlide = (function() {
      var pretty_html_id;

      function RevealSlide($section, section_index) {
        var slide_id, _ref1;
        this.$section = $section;
        this.meta = {};
        this.name = this.$section.data('title');
        this.name || (this.name = this.$section.children().first().text());
        if (this.name != null) {
          this.name = this.name.trim().replace(/\s+/g, ' ');
        }
        this.meta.tags = (_ref1 = this.$section.closest("[data-tags]").data('tags')) != null ? _ref1 : [];
        if (this.name && !this.$section.attr('id')) {
          this.$section.attr('id', pretty_html_id(this.name));
        }
        slide_id = this.$section.attr('id');
        this.meta.url = slide_id ? "#/" + slide_id : "#/" + (section_index || '');
      }

      RevealSlide.prototype.add_meta = function(key, value) {
        var _base, _ref1;
        if (key == null) {
          throw "Expected key (" + key + ") to be present";
        }
        if (type(value) !== 'array') {
          throw "Expected value (" + value + ") to be an array";
        }
        if ((_base = this.meta)[key] == null) {
          _base[key] = [];
        }
        return (_ref1 = this.meta[key]).push.apply(_ref1, value);
      };

      pretty_html_id = function(name) {
        return name.replace(/^[^a-z]+/i, '').replace(/[^a-z0-9-]/gi, '-').replace(/-+/gi, '-').replace(/(-$)/, '');
      };

      return RevealSlide;

    })();
    return module.exports = RevealDeck;
  });

}).call(this);
