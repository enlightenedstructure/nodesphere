// Generated by CoffeeScript 1.10.0
(function() {
  var IpfsAdaptor, Promise, Sphere, d, find, ipfsApi, isEmpty, json, log, pjson, ref, ref1, unique, values,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('lightsaber/lib/log'), json = ref.json, log = ref.log, d = ref.d, pjson = ref.pjson;

  ref1 = require('lodash'), find = ref1.find, isEmpty = ref1.isEmpty, unique = ref1.unique, values = ref1.values;

  Promise = require('bluebird');

  ipfsApi = require('ipfs-api');

  Sphere = require('../../lib/core/sphere');

  IpfsAdaptor = (function() {
    IpfsAdaptor.create = function(options) {
      var host, ipfs, port, ref2, ref3, ref4, ref5;
      if (options == null) {
        options = {};
      }
      host = options.host, port = options.port;
      delete options.host;
      delete options.port;
      if (host == null) {
        host = (ref2 = typeof process !== "undefined" && process !== null ? (ref3 = process.env) != null ? ref3.IPFS_API_HOST : void 0 : void 0) != null ? ref2 : 'localhost';
      }
      if (port == null) {
        port = (ref4 = typeof process !== "undefined" && process !== null ? (ref5 = process.env) != null ? ref5.IPFS_API_PORT : void 0 : void 0) != null ? ref4 : '5001';
      }
      ipfs = ipfsApi(host, port, options);
      return ipfs.commands().then((function(_this) {
        return function() {
          return new IpfsAdaptor({
            ipfs: ipfs
          });
        };
      })(this));
    };

    function IpfsAdaptor(arg) {
      this.ipfs = arg.ipfs;
      this.process = bind(this.process, this);
    }

    IpfsAdaptor.prototype.put = function(arg) {
      var buffer, content;
      content = arg.content;
      buffer = new this.ipfs.Buffer(content);
      return this.ipfs.add(buffer).then((function(_this) {
        return function(items) {
          var i, item, len, results;
          results = [];
          for (i = 0, len = items.length; i < len; i++) {
            item = items[i];
            results.push(item.Hash);
          }
          return results;
        };
      })(this))["catch"](function(err) {
        return console.error(err);
      });
    };

    IpfsAdaptor.prototype.fetch = function(arg) {
      var rootNodeId;
      rootNodeId = arg.rootNodeId;
      return this.ipfs.ls(rootNodeId).then((function(_this) {
        return function(response) {
          var data;
          data = response.Objects[0];
          return _this.process({
            rootNodeId: rootNodeId,
            data: data
          });
        };
      })(this))["catch"](function(err) {
        return console.error(err);
      });
    };

    IpfsAdaptor.prototype.process = function(arg) {
      var data, end, i, len, link, ref2, rootNodeId, sphere, start;
      rootNodeId = arg.rootNodeId, data = arg.data;
      sphere = new Sphere;
      start = sphere.addNode({
        id: rootNodeId
      });
      ref2 = data.Links;
      for (i = 0, len = ref2.length; i < len; i++) {
        link = ref2[i];
        end = sphere.addNode({
          id: link.Hash,
          name: link.Name,
          size: link.Size,
          ipfsType: link.Type
        });
        sphere.addEdge({
          start: start,
          end: end
        });
      }
      return sphere;
    };

    IpfsAdaptor.prototype.path = function(id) {
      return "/ipfs/" + id;
    };

    return IpfsAdaptor;

  })();

  module.exports = IpfsAdaptor;

}).call(this);
