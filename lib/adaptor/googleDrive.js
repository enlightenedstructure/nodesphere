// Generated by CoffeeScript 1.10.0
(function() {
  var GoogleDrive, Sphere, _, d, defaults, promisify,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  d = require('lightsaber/lib/log').d;

  defaults = (_ = require('lodash')).defaults;

  promisify = require('native-promisify-if-present');

  Sphere = require('../core/sphere');

  GoogleDrive = (function() {
    function GoogleDrive() {
      this.toSphere = bind(this.toSphere, this);
    }

    GoogleDrive.create = promisify(function(args, callback) {
      if (typeof gapi === "undefined" || gapi === null) {
        callback("Google API (global 'gapi' object) not found.  See: https://developers.google.com/drive/v3/web/quickstart/js");
      }
      defaults(args, {
        scope: 'https://www.googleapis.com/auth/drive.readonly',
        immediate: true
      });
      return gapi.auth.authorize(args, (function(_this) {
        return function(authResult) {
          return _this.handleAuthResult(authResult, args, callback);
        };
      })(this));
    });

    GoogleDrive.handleAuthResult = function(authResult, args, callback) {
      if (authResult && !authResult.error) {
        return callback(null, new GoogleDrive);
      } else {
        _.assign(args, {
          immediate: false
        });
        return gapi.auth.authorize(args, (function(_this) {
          return function(authResult) {
            return _this.handleAuthResult(authResult, args, callback);
          };
        })(this));
      }
    };

    GoogleDrive.prototype.fetch = promisify(function(arg, callback) {
      var filter, rootNodeId;
      rootNodeId = arg.rootNodeId;
      filter = "'" + rootNodeId + "' in parents";
      return this.getFiles(filter).then((function(_this) {
        return function(files) {
          var sphere;
          _this.addMetadata(files);
          sphere = _this.toSphere(rootNodeId, files);
          return callback(null, sphere);
        };
      })(this));
    });

    GoogleDrive.prototype.addMetadata = function(files) {
      var file, i, len, ref, ref1, results;
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        if ((file.id != null) && (file.viewUrl == null)) {
          if (file.viewUrl == null) {
            file.viewUrl = "http://drive.google.com/uc?export=view&id=" + file.id;
          }
        }
        if ((file.id != null) && (file.downloadUrl == null)) {
          if (file.downloadUrl == null) {
            file.downloadUrl = "http://drive.google.com/uc?export=download&id=" + file.id;
          }
        }
        if ((file.id != null) && file.mimeType.startsWith('image/') && (file.thumbnailUrl == null)) {
          if (file.thumbnailUrl == null) {
            file.thumbnailUrl = "https://drive.google.com/thumbnail?authuser=0&sz=w320&id=" + file.id;
          }
        }
        results.push(file.exifOrFileCreated != null ? file.exifOrFileCreated : file.exifOrFileCreated = (ref = (ref1 = file.imageMediaMetadata) != null ? ref1.time : void 0) != null ? ref : file.createdTime);
      }
      return results;
    };

    GoogleDrive.prototype.toSphere = function(rootNodeId, files) {
      var file, i, len, root, sphere;
      sphere = new Sphere;
      root = sphere.addRootNode({
        id: rootNodeId
      });
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        sphere.addEdge({
          start: root,
          end: sphere.addNode(file)
        });
      }
      return sphere;
    };

    GoogleDrive.prototype.getFiles = function(filter, allFiles, nextPageToken) {
      if (allFiles == null) {
        allFiles = [];
      }
      if (nextPageToken == null) {
        nextPageToken = null;
      }
      return gapi.client.request({
        path: "drive/v3/files",
        params: {
          q: filter,
          pageToken: nextPageToken,
          fields: 'files,kind,nextPageToken',
          pageSize: 1000
        }
      }).then((function(_this) {
        return function(response) {
          var files, ref;
          ref = response.result, files = ref.files, nextPageToken = ref.nextPageToken;
          allFiles.push.apply(allFiles, files);
          if (nextPageToken) {
            return _this.getFiles(filter, allFiles, nextPageToken);
          } else {
            return allFiles;
          }
        };
      })(this));
    };

    return GoogleDrive;

  })();

  module.exports = GoogleDrive;

}).call(this);
