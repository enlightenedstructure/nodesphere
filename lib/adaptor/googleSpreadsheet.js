// Generated by CoffeeScript 1.10.0
(function() {
  var GoogleSpreadsheet, Promise, Sphere, log, p, ref, request, startsWith,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('axios');

  Promise = require('bluebird');

  ref = require('lightsaber/lib/log'), log = ref.log, p = ref.p;

  startsWith = require('lodash').startsWith;

  Sphere = require('../core/sphere');

  GoogleSpreadsheet = (function() {
    var URL_PATTERN;

    URL_PATTERN = /^\s*https?:\/\/.+\.google.com.*\/spreadsheet\/.*key=([\w-]{44})/;

    GoogleSpreadsheet.understands = function(url) {
      return URL_PATTERN.exec(url) != null;
    };

    GoogleSpreadsheet.create = function(args) {
      return Promise.resolve(new GoogleSpreadsheet(args));
    };

    function GoogleSpreadsheet(options) {
      var base, base1;
      this.options = options != null ? options : {};
      this.each_cell = bind(this.each_cell, this);
      this.sphere_from = bind(this.sphere_from, this);
      if ((base = this.options).id == null) {
        base.id = this.options.source_gsheet;
      }
      if (!((this.options.url != null) || (this.options.id != null))) {
        throw new Error("Either ID or URL required");
      }
      if ((base1 = this.options).gsheet_orientation == null) {
        base1.gsheet_orientation = 'columns';
      }
      if (this.options.url) {
        this.options.id = URL_PATTERN.exec(this.options.url)[1];
        if (!this.options.id) {
          throw new Error("Could not parse spreadsheet ID from URL: " + this.options.url);
        }
        this.options.url = null;
      }
      this.json_url = "https://spreadsheets.google.com/feeds/cells/" + this.options.id + "/1/public/basic?alt=json";
    }

    GoogleSpreadsheet.prototype.fetch = function() {
      return request({
        url: this.json_url
      }).then((function(_this) {
        return function(response) {
          return _this.sphere_from(response.data);
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          throw new Error("Error getting '" + _this.json_url + "': " + error.stack);
        };
      })(this));
    };

    GoogleSpreadsheet.prototype.sphere_from = function(spreadsheet) {
      var primary_headers, secondary_headers, sphere;
      sphere = new Sphere;
      sphere.attr('url', this.json_url);
      primary_headers = {};
      secondary_headers = {};
      this.each_cell(spreadsheet, (function(_this) {
        return function(text, primary_index, secondary_index) {
          if (primary_index === 1) {
            secondary_headers[secondary_index] = text;
          }
          if (secondary_index === 1) {
            return primary_headers[primary_index] = text;
          }
        };
      })(this));
      this.each_cell(spreadsheet, (function(_this) {
        return function(text, primary_index, secondary_index) {
          var secondary_header;
          secondary_header = secondary_headers[secondary_index];
          if (primary_index > 1 && secondary_index > 1) {
            return sphere.triple(primary_headers[primary_index], secondary_header || null, text);
          }
        };
      })(this));
      return sphere;
    };

    GoogleSpreadsheet.prototype.each_cell = function(spreadsheet, callback) {
      var cell, cells, col, i, id, len, match, ref1, results, row, text;
      cells = spreadsheet.feed.entry;
      results = [];
      for (i = 0, len = cells.length; i < len; i++) {
        cell = cells[i];
        text = cell.content.$t;
        id = cell.id.$t;
        ref1 = /R(\d+)C(\d+)$/.exec(id), match = ref1[0], row = ref1[1], col = ref1[2];
        if (this.options.gsheet_orientation === 'columns') {
          results.push(callback(text, Number(col), Number(row)));
        } else if (this.options.gsheet_orientation === 'rows') {
          results.push(callback(text, Number(row), Number(col)));
        } else {
          throw new Error("Unexpected value for options.gsheet_orientation: '" + this.options.gsheet_orientation + "'");
        }
      }
      return results;
    };

    return GoogleSpreadsheet;

  })();

  module.exports = GoogleSpreadsheet;

}).call(this);
